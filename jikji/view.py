# -*- coding: utf-8 -*-
"""
	jikji/view
	---------------
	View, Page Class


	Jikji has a concept 'View', which is similar to 'Controller' on common backend framework
	One View has one 'URL rule', one 'Template', and multiple 'Pages'.

	Usually, the controller has the role of taking the data from the model
	with the PARAMETERS in URL and returning the HTML with the View.

	In static web, PARAMETERS are provided in advance.
	There are many tuple set of parameters in ONE VIEW.

	Jikji calls the tuple 'Page'

	
	For example, 'Article View' has url rule '/posts/$1/$2'
	The sample pages for 'Article View' will have the following.

	/posts/dev/best-sublime-text-3-themes-of-2016
	/posts/dev/the-best-news-from-angulars-ng-conf

	:author: Prev(prevdev@gmail.com)
"""

import os
from datetime import datetime
from . import utils


def makeviews(rules) :
	""" Make Views
		Called in application's pages.py
	"""
	for rule in rules :
		View.addview(*rule)


def view(viewid) :
	""" Get View by id
		Called in application's pages.py
	"""
	return View.getview(viewid)



class View() :
	_views = {}

	@staticmethod
	def getviews() :
		""" Get all views
		"""
		return list(View._views.values())

	@staticmethod
	def getview(viewid) :
		""" Find view by id
		"""
		return View._views[viewid]

	@staticmethod
	def addview(viewid, url_rule, template_path, options=None) :
		""" Add view to application
		"""
		View._views[viewid] = View(
			id = viewid,
			url_rule = url_rule,
			template_path = template_path,
			options = options
		)


	def __init__(self, id, url_rule, template_path, options=None) :
		""" View Constructor
		:param viewid: ID of view, load view-model by id
		:param url_rule: Rule of URL. One view has one URL RULE.
						 ex) /posts/$1/$2
						 Pages in views are classified by params in url rule
		:param template_path: File path of template rendered
		:param options: Option param
		"""

		self.id = id
		self.url_rule = url_rule
		self.template_path = template_path
		self.options = options
		self.pages = []


	def addpage(self, *params) :
		""" Add page to View
		:param *params: Data Param in View's URL Rule ($1, $2, $3)
		"""
		self.pages.append(Page(self, params))


	def init_viewmodel(self, settings) :
		""" Load and assign ViewModel
		"""
		tmp = self.id.split('.')

		path = os.path.join(*tmp[0:-1])
		path = os.path.join(settings.VIEWMODEL_ROOT, path + '.py')


		module = utils.load_module(path)
		function_name = tmp[-1]

		self.viewmodel = module.__dict__[ function_name ]
		return self.viewmodel


class Page :
	def __init__(self, view, params) :
		""" Page Constructor
		:param view: Target View
					 View and Page are mapped in 1:n relationship
		:param params: Params of Page inserted in url rule
		"""
		self.view = view
		self.params = params


	def getcontext(self) :
		""" Get context of page
			Context is generated by ViewModel with params in page.
		"""
		context = self.view.viewmodel( *self.params )

		if type(context) == dict :
			# THINK: better way to provide page info?
			context['_page'] = {
				'url': self.geturl(),
				'template': self.view.template_path,
				'render_time': datetime.now(),
			}

		return context


	def geturl(self) :
		""" Get url of page by matching URL rule and params
		"""
		url = self.view.url_rule

		for index, param in enumerate(self.params) :
			url = url.replace('$%d' % (index+1), str(param))

		return url
